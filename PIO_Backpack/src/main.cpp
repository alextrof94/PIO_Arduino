#include <Arduino.h>
#include <EEPROM.h>

bool animEnabled = true;

const uint16_t brightnessAddress = 10;
uint8_t brightness = 100;
const uint8_t brightnessDefault = 50;
const uint8_t brightnessMax = 100;

const uint16_t spaceBetweenCharsAddress = 20;
uint8_t spaceBetweenChars = 1;
const uint8_t spaceBetweenCharsDefault = 1;

const uint8_t animDelayMultiplexerAddress = 30;
uint8_t animDelayMultiplexer = 50;
const uint8_t animDelayMultiplexerDefault = 50;

const uint16_t textInLengthAddress = 999;
uint8_t textInLength = 0;
const uint16_t textInAddress = 1000;

//Б Г Д Ж З И Й Л П Ф Ц Ч Ш Щ Ь Ы Ъ Э Ю Я
//q u l w p b d k g a y x i o m s e r t z
//PROGMEM const char text[] =  " ~d020000 ~c005 yEHTP xKAkOBA gOplPABkzET BAC ";
PROGMEM const char text[] =  " ~d025000 ~c005 yEHTP xKAkOBA ~c006 TEk: 562-14-83 ~c002 KApAHm lEKAqPbCTOB 89 ~c007  CAdT: CHKALOVC.RU "; 
//PROGMEM const char text[] =  " ~d020000 ~c001 WORLDSKILLS RUSSIA 2019 "; 
//PROGMEM const char text2[] = " ~d020000 ~c005 C MEwlYHAPOlHsM wEHCKbM lHEM! ";
PROGMEM const char text2[] = " ~d025000 ~c007 YxbM kETATm HA HACTOzobX CAMOkETAX 13+.  ~c006 POqOTOTEXHbKA~c003 6-9~c057 10-13~c002 14-17~c006 kET. rkEKTPOHbKA 10+ b MHOuOE lPYuOE! ";
//PROGMEM const char text2[] = " ~d020000 ~c003 rkEKTPOHbKA ";

/* EFFECTS
0 - without
1 - rainbow every col
2 - rainbow every char
3 - rainbow every string
4 - rainbow every cycle
*/
uint8_t effect = 0; 
uint8_t effect2 = 0;

const uint8_t defaultColor = 5;
uint8_t colColor = defaultColor;
uint8_t colColor2 = defaultColor;
uint8_t textCycle = 0;
uint8_t textCycle2 = 0;
const uint8_t textCycleCount = 3;

uint8_t textCharPos = 0;
uint8_t charCol = 0;
uint8_t assignedAlphabetCharIndex = 0;
uint16_t assignedAlphabetCharStart = 0;

uint8_t textCharPos2 = 0;
uint8_t charCol2 = 0;
uint8_t assignedAlphabetCharIndex2 = 0;
uint16_t assignedAlphabetCharStart2 = 0;

uint32_t textColSwitchingTime = 0;
uint32_t textColSwitchingDelay = 25000; // micros
uint32_t textColSwitchingTime2 = 0;
uint32_t textColSwitchingDelay2 = 25000; // micros

#include <FastLED.h>
#define LEDS_COUNT 256
#define PIN_LEDSTRIP 2
const uint8_t LEDSTRIP_SEGMENT_COUNT = 2;
const uint8_t PIN_LEDSTRIP_SEGMENT_SELECT [2] = {3,4}; // L, ..., R
CRGBArray<LEDS_COUNT> leds;

#define ALPHABET_COUNT 71

const char alphabet[ALPHABET_COUNT] PROGMEM = {
  ' ', 
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 
  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',  
  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
 //Б    Г    Д    Ж    З    И    Й    Л    П    Ф    Ц    Ч    Ш    Щ    Ь    Ы    Ъ    Э    Ю    Я
  'q', 'u', 'l', 'w', 'p', 'b', 'd', 'k', 'g', 'a', 'y', 'x', 'i', 'o', 'm', 's', 'e', 'r', 't', 'z', 
  '.', ',', '!', '?', '<', '>', '+', '-', '=', '(', ')', ':', '_', '"'
};

const uint8_t alphabetLengths[ALPHABET_COUNT] PROGMEM = {
  3,
  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5,
  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
  5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 6, 5, 7, 8, 5, 7, 7, 5, 5, 5,
  1, 1, 1, 5, 3, 3, 3, 3, 3, 2, 2, 1, 3, 3
};
/* 5 50 250
// 6 3   18
// 7 3   21
// 1 4    4
// 2 2    4
// 3 8   24
// 8 1    8
*/

const uint8_t chars[329] PROGMEM = {
  B00000000,
  B00000000,
  B00000000,
  
  B01111110,
  B00001001,
  B00001001,
  B00001001,
  B01111110,

  B01111111,
  B01001001,
  B01001001,
  B01001001,
  B00110110,

  B00111110,
  B01000001,
  B01000001,
  B01000001,
  B00100010,
  
  B01111111,
  B01000001,
  B01000001,
  B01000001,
  B00111110,
  
  B01111111,
  B01001001,
  B01001001,
  B01001001,
  B01001001,

  B01111111,
  B00001001,
  B00001001,
  B00001001,
  B00001001,

  B00111110,
  B01000001,
  B01001001,
  B01001001,
  B00110010,

  B01111111,
  B00001000,
  B00001000,
  B00001000,
  B01111111,

  B01000001,
  B01000001,
  B01111111,
  B01000001,
  B01000001,

  B00100000,
  B01000000,
  B01000001,
  B01000001,
  B00111111,

  B01111111,
  B00001000,
  B00010100,
  B00100010,
  B01000001,

  B01111111,
  B01000000,
  B01000000,
  B01000000,
  B01100000,

  B01111111,
  B00000010,
  B00000100,
  B00000010,
  B01111111,

  B01111111,
  B00000010,
  B00000100,
  B00001000,
  B01111111,

  B00111110,
  B01000001,
  B01000001,
  B01000001,
  B00111110,

  B01111111,
  B00001001,
  B00001001,
  B00001001,
  B00000110,

  B00111110,
  B01000001,
  B01010001,
  B01100001,
  B01111110,
  B10000000,

  B01111111,
  B00001001,
  B00011001,
  B00101001,
  B01000110,

  B01000110,
  B01001001,
  B01001001,
  B01001001,
  B00110001,

  B00000001,
  B00000001,
  B01111111,
  B00000001,
  B00000001,
  
  B00111111,
  B01000000,
  B01000000,
  B01000000,
  B00111111,

  B00000111,
  B00011000,
  B01100000,
  B00011000,
  B00000111,

  B01111111,
  B00100000,
  B00010000,
  B00100000,
  B01111111,
  
  B01100011,
  B00010100,
  B00001000,
  B00010100,
  B01100011,
  
  B00100111,
  B01001000,
  B01001000,
  B01001000,
  B00111111,

  B01100001,
  B01010001,
  B01001001,
  B01000101,
  B01000011,
  
  // NUMS 
  B00111110,
  B01010001,
  B01001001,
  B01000101,
  B00111110,
  
  B01000100,
  B01000010,
  B01111111,
  B01000000,
  B01000000,
  
  B01000010,
  B01100001,
  B01010001,
  B01001001,
  B01000110,
  
  B00100010,
  B01000001,
  B01000001,
  B01001001,
  B00110110,

  B00001100,
  B00001010,
  B00001001,
  B01111111,
  B00001000,
  
  B00101111,
  B01001001,
  B01001001,
  B01001001,
  B00110001,
  
  B00111110,
  B01001001,
  B01001001,
  B01001001,
  B00110010,
  
  B00000011,
  B00000001,
  B01110001,
  B00001001,
  B00000111,
  
  B00110110,
  B01001001,
  B01001001,
  B01001001,
  B00110110,
  
  B00100110,
  B01001001,
  B01001001,
  B01001001,
  B00111110,
  
  // RUS

  B01111111,
  B01001001,
  B01001001,
  B01001001,
  B00110001,

  B01111111,
  B00000001,
  B00000001,
  B00000001,
  B00000011,

  B11000000,
  B01111110,
  B01000001,
  B01000001,
  B01111111,
  B11000000,

  B01100011,
  B00011100,
  B01111111,
  B00011100,
  B01100011,
  
  B01000001,
  B01000001,
  B01000001,
  B01001001,
  B01110111,
  
  B01111111,
  B00100000,
  B00010000,
  B00001000,
  B01111111,
  
  B01111111,
  B00100000,
  B00010001,
  B00001000,
  B01111111,

  B01111000,
  B00000100,
  B00000010,
  B00000001,
  B01111111,
  
  B01111111,
  B00000001,
  B00000001,
  B00000001,
  B01111111,

  B00000110,
  B00001001,
  B01111111,
  B00001001,
  B00000110, 

  B01111111,
  B01000000,
  B01000000,
  B01000000,
  B01111111,
  B11000000,

  B00001111,
  B00001000,
  B00001000,
  B00001000,
  B01111111,

  B01111111,
  B01000000,
  B01000000,
  B01111111,
  B01000000,
  B01000000,
  B01111111,
  
  B01111111,
  B01000000,
  B01000000,
  B01111111,
  B01000000,
  B01000000,
  B01111111,
  B11000000,
  
  B01111111,
  B01001000,
  B01001000,
  B01001000,
  B00110000,

  B01111111,
  B01001000,
  B01001000,
  B01001000,
  B00110000,
  B00000000,
  B01111111,
  
  B00000010,
  B00000001,
  B01111111,
  B01001000,
  B01001000,
  B01001000,
  B00110000,

  B00100010,
  B01000001,
  B01001001,
  B01001001,
  B00111110,
  
  B01111111,
  B00001000,
  B00111110,
  B01000001,
  B00111110,
  
  B01000110,
  B00101001,
  B00011001,
  B00001001,
  B01111111,

  // CHARS

  B01000000,
  
  B11000000,

  B01011111,

  B00000010,
  B00000001,
  B01010001,
  B00001001,
  B00000110,
  
  B00001000,
  B00010100,
  B00100010,
  
  B00100010,
  B00010100,
  B00001000,
  
  B00001000,
  B00011100,
  B00001000,
  
  B00001000,
  B00001000,
  B00001000,
  
  B00010100,
  B00010100,
  B00010100,

  B00111110,
  B01000001,
  
  B01000001,
  B00111110,

  B01001000,
  
  B10000000,
  B10000000,
  B10000000,
  
  B00000111,
  B00000000,
  B00000111
};

uint8_t animStage = 0;

/* ANIM WorldSkills 
const uint8_t animStageCount = 4;
const uint32_t animWorkflow[4][4] PROGMEM = {
  {0, 0, 5, 0},
  {1, 0, 5, 0},
  {3, 0, 5, 0},
  {2, 0, 5, 0}
};

const uint8_t anim[4][16][16] PROGMEM = {
  {
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0},
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0},
    {0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0},
    {2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0},
    {0,0,2,0,0,2,2,2,2,2,0,0,2,0,0,0},
    {2,2,2,0,0,2,0,0,0,2,0,0,2,2,2,0},
    {0,0,2,0,0,2,0,0,0,2,0,0,2,0,0,0},
    {2,2,2,0,0,2,0,0,0,2,0,0,2,2,2,0},
    {0,0,2,0,0,2,2,2,2,2,0,0,2,0,0,0},
    {2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0},
    {0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0},
    {0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0},
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, {
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0},
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0},
    {0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2},
    {0,0,0,2,0,0,2,2,2,2,2,0,0,2,0,0},
    {0,2,2,2,0,0,2,0,0,0,2,0,0,2,2,2},
    {0,0,0,2,0,0,2,0,0,0,2,0,0,2,0,0},
    {0,2,2,2,0,0,2,0,0,0,2,0,0,2,2,2},
    {0,0,0,2,0,0,2,2,2,2,2,0,0,2,0,0},
    {0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2},
    {0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0},
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0},
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0},
    {0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0},
    {2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0},
    {0,0,2,0,0,2,2,2,2,2,0,0,2,0,0,0},
    {2,2,2,0,0,2,0,0,0,2,0,0,2,2,2,0},
    {0,0,2,0,0,2,0,0,0,2,0,0,2,0,0,0},
    {2,2,2,0,0,2,0,0,0,2,0,0,2,2,2,0},
    {0,0,2,0,0,2,2,2,2,2,0,0,2,0,0,0},
    {2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,0},
    {0,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0},
    {0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0},
    {0,0,0,0,2,0,2,0,2,0,2,0,0,0,0,0}
  }, {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0},
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0},
    {0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2},
    {0,0,0,2,0,0,2,2,2,2,2,0,0,2,0,0},
    {0,2,2,2,0,0,2,0,0,0,2,0,0,2,2,2},
    {0,0,0,2,0,0,2,0,0,0,2,0,0,2,0,0},
    {0,2,2,2,0,0,2,0,0,0,2,0,0,2,2,2},
    {0,0,0,2,0,0,2,2,2,2,2,0,0,2,0,0},
    {0,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2},
    {0,0,0,2,0,0,0,0,0,0,0,0,0,2,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0},
    {0,0,0,0,0,2,0,2,0,2,0,2,0,0,0,0}
  }
};
/**/

/* ANIM HEART 
const uint8_t animStageCount = 7;
const uint32_t animWorkflow[7][4] PROGMEM = {
  // heart
  {0, 1, 10, 30},
  {1, 0, 3, 0},
  {2, 0, 6, 0},
  {3, 0, 2, 0},
  {2, 0, 6, 0},
  {3, 0, 3, 0},
  {4, 0, 2, 0}
};

const uint8_t anim[5][16][16] PROGMEM = {
  // heart
  {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0},
    {0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0},
    {0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0},
    {0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,26,26,26,26,0,0,0,0},
    {0,0,0,0,0,0,0,26,2,2,2,2,26,0,0,0},
    {0,0,0,0,0,0,26,2,2,2,2,2,2,26,0,0},
    {0,0,0,0,0,26,2,2,2,2,2,2,2,26,0,0},
    {0,0,0,0,26,2,2,2,2,2,2,2,2,26,0,0},
    {0,0,0,26,2,2,2,2,2,2,2,2,26,0,0,0},
    {0,0,26,2,2,2,2,2,2,2,2,26,0,0,0,0},
    {0,0,26,2,2,2,2,2,2,2,2,26,0,0,0,0},
    {0,0,0,26,2,2,2,2,2,2,2,2,26,0,0,0},
    {0,0,0,0,26,2,2,2,2,2,2,2,2,26,0,0},
    {0,0,0,0,0,26,2,2,2,2,2,2,2,26,0,0},
    {0,0,0,0,0,0,26,2,2,2,2,2,2,26,0,0},
    {0,0,0,0,0,0,0,26,2,2,2,2,26,0,0,0},
    {0,0,0,0,0,0,0,0,26,26,26,26,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,26,26,26,0,0,0,0,0},
    {0,0,0,0,0,0,0,26,2,2,2,26,0,0,0,0},
    {0,0,0,0,0,0,26,2,2,2,2,2,26,0,0,0},
    {0,0,0,0,0,26,2,2,2,2,2,2,26,0,0,0},
    {0,0,0,0,26,2,2,2,2,2,2,26,0,0,0,0},
    {0,0,0,26,2,2,2,2,2,2,26,0,0,0,0,0},
    {0,0,0,26,2,2,2,2,2,2,26,0,0,0,0,0},
    {0,0,0,0,26,2,2,2,2,2,2,26,0,0,0,0},
    {0,0,0,0,0,26,2,2,2,2,2,2,26,0,0,0},
    {0,0,0,0,0,0,26,2,2,2,2,2,26,0,0,0},
    {0,0,0,0,0,0,0,26,2,2,2,26,0,0,0,0},
    {0,0,0,0,0,0,0,0,26,26,26,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }
};
/**/

/* ANIM ROBOT 
const uint8_t animStageCount = 10;
const uint32_t animWorkflow[10][4] PROGMEM = {
  // robot
  {0, 1, 20, 60},
  {1, 0, 4, 0},
  {0, 1, 20, 60},
  {2, 1, 20, 60},
  {3, 0, 4, 0},
  {2, 1, 20, 60},
  {0, 1, 20, 60},
  {2, 1, 20, 60},
  {0, 1, 20, 60},
  {2, 1, 20, 60}
};

const uint8_t anim[4][16][16] PROGMEM = { 
  // robot
  {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,3,3,1,0,1,0,0,0,1},
    {0,1,0,1,0,0,1,0,0,1,0,1,14,0,1,0},
    {0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1},
    {0,1,0,1,0,0,0,0,0,0,0,1,14,0,1,0},
    {0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1},
    {0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,3,3,1,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,0},
    {0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,3,3,1,0,1,0,0,0,1},
    {0,1,0,1,0,0,1,0,0,1,0,1,14,0,1,0},
    {0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1},
    {0,1,0,1,0,0,0,0,0,0,0,1,14,0,1,0},
    {0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1},
    {0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1},
    {0,1,0,1,0,0,1,3,3,1,0,1,14,0,1,0},
    {0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1},
    {0,1,0,1,0,0,0,0,0,0,0,1,14,0,1,0},
    {0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1},
    {0,1,0,1,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,3,3,1,0,1,0,0,0,0},
    {0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,1,0,0,0,0,1,1,1,0,0,1,0,0,0,0},
    {0,1,0,1,0,0,1,0,0,1,0,1,0,0,0,1},
    {0,1,0,1,0,0,1,3,3,1,0,1,14,0,1,0},
    {0,1,0,1,0,0,1,1,1,0,0,1,1,1,1,1},
    {0,1,0,1,0,0,0,0,0,0,0,1,14,0,1,0},
    {0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1},
    {0,1,0,1,0,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,0,0,1,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,0},
    {0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0},
    {0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }
};
/**/

/* ANIM WALL-E */
const uint8_t animStageCount = 43;
#define MOVESPD 3
const uint8_t animWorkflow[43][4] PROGMEM = {
  // wall-e
  {7, 1, 60, 100},
  {8, 0, MOVESPD, 0},
  {9, 0, MOVESPD, 0},
  {10, 0, MOVESPD, 0},
  {11, 0, MOVESPD, 0},
  {12, 0, MOVESPD, 0},
  {13, 0, MOVESPD, 0},
  {14, 0, MOVESPD, 0},
  {15, 0, MOVESPD, 0},
  {16, 0, MOVESPD, 0},
  {17, 0, MOVESPD, 0},
  {18, 0, MOVESPD, 0},
  {19, 0, MOVESPD, 0},
  {20, 0, MOVESPD, 0},
  {21, 0, MOVESPD, 0},
  {22, 0, MOVESPD, 0},
  {5, 0, MOVESPD, 0},
  {4, 0, 10, 0},
  {0, 1, 20, 40},
  {1, 0, 6, 0},
  {3, 0, 14, 0},
  {2, 0, 6, 0},
  {0, 0, 10, 0},
  {3, 0, 14, 0},
  {0, 0, 6, 0},
  {3, 0, 10, 0},
  {0, 0, 20, 0},
  {4, 0, 10, 0},
  {5, 0, MOVESPD, 0},
  {23, 0, MOVESPD, 0},
  {24, 0, MOVESPD, 0},
  {25, 0, MOVESPD, 0},
  {26, 0, MOVESPD, 0},
  {27, 0, MOVESPD, 0},
  {28, 0, MOVESPD, 0},
  {29, 0, MOVESPD, 0},
  {30, 0, MOVESPD, 0},
  {31, 0, MOVESPD, 0},
  {32, 0, MOVESPD, 0},
  {33, 0, MOVESPD, 0},
  {34, 0, MOVESPD, 0},
  {35, 0, MOVESPD, 0},
  {36, 0, MOVESPD, 0}
};

const uint8_t anim[37][16][16] PROGMEM = {
  { // 0 eyes 0
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {106,105,106,105,106,101,101,101,101,0,0,0,0,105,105,0},
    {0,0,103,103,103,102,101,101,102,103,0,0,105,100,100,105},
    {0,0,103,103,103,102,102,102,102,103,0,0,105,102,102,105},
    {0,0,103,103,103,103,104,104,104,103,0,0,0,105,100,105},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,105},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,105},
    {0,0,103,103,103,103,104,104,104,103,0,0,0,105,100,105},
    {0,0,103,103,103,102,102,102,102,103,0,0,105,102,102,105},
    {0,0,103,103,103,102,101,101,102,103,0,0,105,100,100,105},
    {106,105,106,105,106,101,101,101,101,0,0,0,0,105,105,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 1 eyes l
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {106,105,106,105,106,101,101,101,101,0,0,0,105,105,0,0},
    {0,0,103,103,103,102,101,101,102,103,0,105,100,102,105,0},
    {0,0,103,103,103,102,102,102,102,103,0,105,100,102,100,105},
    {0,0,103,103,103,103,104,104,104,103,0,0,105,105,105,105},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,0},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,105},
    {0,0,103,103,103,103,104,104,104,103,0,0,0,105,100,105},
    {0,0,103,103,103,102,102,102,102,103,0,0,105,102,102,105},
    {0,0,103,103,103,102,101,101,102,103,0,0,105,100,100,105},
    {106,105,106,105,106,101,101,101,101,0,0,0,0,105,105,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 2 eyes r
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {106,105,106,105,106,101,101,101,101,0,0,0,0,105,105,0},
    {0,0,103,103,103,102,101,101,102,103,0,0,105,100,100,105},
    {0,0,103,103,103,102,102,102,102,103,0,0,105,102,102,105},
    {0,0,103,103,103,103,104,104,104,103,0,0,0,105,100,105},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,105},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,0},
    {0,0,103,103,103,103,104,104,104,103,0,0,105,105,105,105},
    {0,0,103,103,103,102,102,102,102,103,0,105,100,102,100,105},
    {0,0,103,103,103,102,101,101,102,103,0,105,100,102,105,0},
    {106,105,106,105,106,101,101,101,101,0,0,0,105,105,0,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 3 eyes 2
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {106,105,106,105,106,101,101,101,101,0,0,0,105,105,0,0},
    {0,0,103,103,103,102,101,101,102,103,0,105,100,102,105,0},
    {0,0,103,103,103,102,102,102,102,103,0,105,100,102,100,105},
    {0,0,103,103,103,103,104,104,104,103,0,0,105,105,105,105},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,0},
    {0,0,103,103,103,103,104,104,104,103,104,104,104,104,105,0},
    {0,0,103,103,103,103,104,104,104,103,0,0,105,105,105,105},
    {0,0,103,103,103,102,102,102,102,103,0,105,100,102,100,105},
    {0,0,103,103,103,102,101,101,102,103,0,105,100,102,105,0},
    {106,105,106,105,106,101,101,101,101,0,0,0,105,105,0,0},
    {105,105,105,105,105,104,104,0,0,0,0,0,0,0,0,0},
    {105,106,105,106,105,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 4 half-rotate
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,101,105,0,0,0,0,0,0,0,106,106,0},
    {105,101,101,101,102,105,103,103,103,103,0,0,0,106,106,106},
    {105,102,101,102,105,103,103,103,103,103,0,0,106,105,105,106},
    {105,  0,102,105,105,103,104,104,103,103,0,0,105,100,100,105},
    {105,101,105,105,103,103,104,104,103,103,0,0,105,102,102,105},
    {105,105,105,103,103,103,104,104,103,103,104,0,103,105,100,105},
    {106,105,104,104,104,104,104,104,107,104,104,103,103,106,105,105},
    {106,102,104,104,104,101,101,101,101,104,0,103,106,105,100,105},
    {106,102,104,104,104,102,102,102,102,104,0,0,105,102,102,105},
    {106,0,104,104,104,104,107,107,107,104,0,0,105,100,100,105},
    {106,102,104,104,104,104,107,107,107,104,0,0,0,105,105,0},
    {105,106,105,0,0,0,103,103,0,0,0,0,0,0,0,0},
    {0,105,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0}
  }, 
  { // 5 right 1
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0}
  }, 
  { // 6 right 2
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 7 move0
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 8 move1
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 9 move2
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 10 move3
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 11 move4
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 12 move5
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 13 move6
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 14 move7
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 15 move8
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 16 move9
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 17 move10
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 18 move11
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 19 move12
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 20 move13
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 21 move14
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 22 move15
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0},
    {0,0,0,0,0,102,102,102,102,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 23 move1
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0}
  }, 
  { // 24 move2
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,101,101,101,101,0,0,0,0,0,0,0}
  }, 
  { // 25 move3
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0}
  }, 
  { // 26 move4
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0},
    {0,0,0,0,0,0,104,104,0,0,0,0,0,0,0,0}
  }, 
  { // 27 move5
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105},
    {  0,105,103,103,103,103,104,104,103,103,0,0,0,0,0,0}
  }, 
  { // 28 move6
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105},
    {105,101,105,103,103,103,104,104,103,103,0,0,105,105,105,105}
  }, 
  { // 29 move7
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,103,0,106,106,106,106},
    {105,106,105,103,103,103,104,104,103,103,0,103,105,105,105,105}
  }, 
  { // 30 move8
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,104,104,103,103,103,0,106,106,106,106}
  }, 
  { // 31 move9
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
    {105,106,106,105,103,103,103,103,103,103,0,0,106,106,106,106}
  }, 
  { // 32 move10
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,101,106,101,105,103,103,103,103,103,0,0,0,106,106,106},
    {105,106,106,106,105,103,103,103,103,103,0,0,106,106,106,106},
  }, 
  { // 33 move11
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,101,101,101,106,105,103,103,103,103,0,0,0,106,106,106},
    {105,106,101,106,105,103,103,103,103,103,0,0,0,106,106,106}
  }, 
  { // 34 move12
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,101,106,101,101,105,0,0,0,0,0,0,0,0,0,0},
    {105,106,101,106,106,105,103,103,103,103,0,0,0,106,106,106}
  }, 
  { // 35 move13
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0},
    {105,105,101,106,101,105,0,0,0,0,0,0,0,0,0,0}
  }, 
  { // 36 move14
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,105,105,105,105,0,0,0,0,0,0,0,0,0,0,0}
  }
};
/**/

/* ANIM EVA 
const uint8_t animStageCount = 16;
const uint8_t animWorkflow[16][4] PROGMEM = {
  {0, 0, 4, 0},
  {1, 0, 4, 0},
  {2, 0, 4, 0},
  {3, 0, 4, 0},
  {4, 0, 4, 0},
  {5, 0, 4, 0},
  {6, 0, 4, 0},
  {7, 0, 4, 0},
  {8, 0, 4, 0},
  {9, 0, 4, 0},
  {10, 0, 4, 0},
  {11, 0, 4, 0},
  {12, 0, 4, 0},
  {13, 0, 4, 0},
  {14, 0, 4, 0},
  {15, 0, 100, 0}
};

const uint8_t anim[16][16][16] PROGMEM = {
  { // 0
    {108,108,108,108,108,108,108,108,108,108,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 1
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 2
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 3
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 4
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,109,109,110,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,109,109,110,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 5
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,109,109,110,108,108,108,108},
    {108,108,108,108,108,108,108,108,109,109,109,110,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,109,109,110,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 6
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,109,109,111,111,111,108,108,108,108,108},
    {108,108,108,108,108,109,109,109,111,112,111,108,108,108,108,108},
    {108,108,108,108,108,109,109,109,111,108,111,108,108,108,108,108},
    {108,108,108,108,108,109,109,109,111,112,111,108,108,108,108,108},
    {108,108,108,108,108,108,109,109,111,111,111,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 7
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,109,109,111,111,111,108,108,108,108,108},
    {108,108,108,108,109,109,109,109,111,112,111,108,108,108,108,108},
    {108,108,108,108,109,109,109,109,111,108,111,108,108,108,108,108},
    {108,108,108,108,109,109,109,109,111,112,111,108,108,108,108,108},
    {108,108,108,108,108,108,109,109,111,111,111,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 8
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,109,109,109,109,111,111,111,108,108,108,108},
    {108,108,108,109,109,109,109,109,109,111,112,111,108,108,108,108},
    {108,108,108,109,109,109,109,109,109,111,108,111,108,108,108,108},
    {108,108,108,109,109,109,109,109,109,111,112,111,108,108,108,108},
    {108,108,108,108,108,109,109,109,109,111,111,111,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 9
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,109,109,109,109,109,109,109,109,108,108,108,108},
    {108,108,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {108,108,109,109,109,109,109,109,109,108,112,108,109,108,108,108},
    {108,108,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {108,108,109,109,109,109,109,109,109,108,112,108,109,108,108,108},
    {108,108,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {108,108,108,108,109,109,109,109,109,109,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 10
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,109,109,109,109,109,109,109,109,109,109,108,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,112,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,112,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {108,108,109,109,109,109,109,109,109,109,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 11
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,109,109,109,109,109,109,109,109,109,109,108,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,111,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,112,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,108,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,112,108,109,108,108,108},
    {109,109,109,109,109,109,109,109,109,108,111,108,109,108,108,108},
    {108,108,109,109,109,109,109,109,109,109,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 12
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,109,109,109,109,109,109,109,113,109,109,109,109,108,108,108},
    {109,109,109,109,109,109,109,113,109,108,108,108,108,109,108,108},
    {109,109,109,109,109,109,109,113,109,108,112,112,108,109,108,108},
    {109,109,109,109,109,109,109,113,109,108,112,112,108,109,108,108},
    {109,109,109,109,109,109,109,113,109,108,108,108,108,109,108,108},
    {109,109,109,109,109,109,109,113,109,108,112,112,108,109,108,108},
    {109,109,109,109,109,109,109,113,109,108,112,112,108,109,108,108},
    {109,109,109,109,109,109,109,113,109,108,108,108,108,109,108,108},
    {108,109,109,109,109,109,109,109,113,109,109,109,109,108,108,108},
    {108,113,113,113,113,113,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 13
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,109,109,109,109,108,108,108,108},
    {108,109,109,109,109,109,113,109,108,108,108,108,109,108,108,108},
    {109,109,109,109,109,109,113,109,108,112,108,108,108,109,108,108},
    {109,109,109,109,109,109,113,109,108,108,112,108,108,109,108,108},
    {109,109,109,109,109,109,113,109,108,112,108,108,108,109,108,108},
    {109,109,109,109,109,109,113,109,108,108,108,108,108,109,108,108},
    {109,109,109,109,109,109,113,109,108,108,108,108,108,109,108,108},
    {109,109,109,109,109,109,113,109,108,112,108,108,108,109,108,108},
    {109,109,109,109,109,109,113,109,108,108,112,108,108,109,108,108},
    {109,109,109,109,109,109,113,109,108,112,108,108,108,109,108,108},
    {108,113,113,113,113,113,113,109,108,108,108,108,109,108,108,108},
    {109,109,109,109,109,109,108,108,109,109,109,109,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 14
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,109,109,109,109,108,109,109,109,109,109,108,108,108,108},
    {109,109,109,109,109,113,109,109,108,108,108,108,109,108,108,108},
    {109,109,109,109,109,113,109,108,108,112,108,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,108,112,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,108,112,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,112,108,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,108,108,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,112,108,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,108,112,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,108,112,108,108,109,108,108},
    {109,109,109,109,109,113,109,108,108,112,108,108,108,109,108,108},
    {109,109,109,109,109,113,109,109,108,108,108,108,109,108,108,108},
    {108,108,109,109,109,109,108,109,109,109,109,109,108,108,108,108},
    {109,109,109,109,108,108,108,108,108,108,108,108,108,108,108,108},
    {108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108}
  },
  { // 15
    {115,111,110,110,114,108,108,114,114,114,108,108,114,114,114,114},
    {116,116,118,117,114,108,108,111,116,115,116,111,108,108,114,114},
    {118,120,117,119,114,108,111,116,118,117,117,117,115,114,108,114},
    {120,120,117,115,108,114,122,121,116,116,111,113,117,119,114,114},
    {118,120,117,116,108,111,122,121,116,111,114,111,111,117,115,108},
    {118,120,117,122,108,113,121,121,122,114,121,123,121,116,117,114},
    {118,118,120,113,108,122,110,121,121,114,123,123,123,111,117,113},
    {118,118,120,110,114,122,110,121,121,108,110,123,121,108,119,116},
    {118,118,120,110,114,122,110,121,110,108,114,111,114,108,115,116},
    {119,118,120,110,114,122,110,121,110,108,110,123,110,108,119,110},
    {119,118,118,110,108,122,110,121,111,114,123,123,121,111,119,114},
    {116,116,118,110,108,113,121,110,111,114,123,123,111,115,122,108},
    {121,122,118,110,108,111,122,110,110,108,114,114,122,122,114,114},
    {116,116,119,121,108,108,110,122,121,110,113,122,110,108,114,114},
    {121,122,115,110,108,108,114,110,110,110,111,114,108,114,114,114},
    {114,111,114,114,114,108,114,114,114,108,108,114,114,114,114,114}
  }
};
/**/

const uint8_t textViewHeight = 0;
// textView [LEDSTRIP_SEGMENT_COUNT * 8][8]
uint8_t textView[16][8] = {
  {1,0,0,0,0,0,0,0},
  {0,2,0,0,0,0,0,0},
  {0,0,3,0,0,0,0,0},
  {0,0,0,4,0,0,0,0},
  {0,0,0,0,5,0,0,0},
  {0,0,0,0,0,6,0,0},
  {0,0,0,0,0,0,7,0},
  {0,0,0,0,0,0,0,6},
  {0,0,0,0,0,0,5,0},
  {0,0,0,0,0,4,0,0},
  {0,0,0,0,3,0,0,0},
  {0,0,0,2,0,0,0,0},
  {0,0,1,0,0,0,0,0},
  {0,2,0,0,0,0,0,0}
};

const uint8_t textViewHeight2 = 24;
// textView2 [LEDSTRIP_SEGMENT_COUNT * 8][8]
uint8_t textView2[16][8] = {
  {1,0,0,0,0,0,0,0},
  {0,2,0,0,0,0,0,0},
  {0,0,3,0,0,0,0,0},
  {0,0,0,4,0,0,0,0},
  {0,0,0,0,5,0,0,0},
  {0,0,0,0,0,6,0,0},
  {0,0,0,0,0,0,7,0},
  {0,0,0,0,0,0,0,6},
  {0,0,0,0,0,0,5,0},
  {0,0,0,0,0,4,0,0},
  {0,0,0,0,3,0,0,0},
  {0,0,0,2,0,0,0,0},
  {0,0,1,0,0,0,0,0},
  {0,2,0,0,0,0,0,0}
};

CRGB getColorByByte(uint8_t c) {
  switch (c) {
    case 0: return 0; break;
    case 1: return 0xFFFFFF; break;
    case 2: return 0xFF0000; break;
    case 3: return 0x00FF00; break;
    case 4: return 0x0000FF; break;
    case 5: return 0xFFFF00; break;
    case 6: return 0x00FFFF; break;
    case 7: return 0xFF00FF; break;
    case 10: return 0x010101; break;
    case 11: return 0x111111; break;
    case 12: return 0x222222; break;
    case 13: return 0x333333; break;
    case 14: return 0x444444; break;
    case 15: return 0x666666; break;
    case 16: return 0x888888; break;
    case 17: return 0xAAAAAA; break;
    case 18: return 0xCCCCCC; break;
    case 19: return 0xEEEEEE; break;
    case 20: return 0x010000; break;
    case 21: return 0x110000; break;
    case 22: return 0x220000; break;
    case 23: return 0x330000; break;
    case 24: return 0x440000; break;
    case 25: return 0x660000; break;
    case 26: return 0x880000; break;
    case 27: return 0xAA0000; break;
    case 28: return 0xCC0000; break;
    case 29: return 0xEE0000; break;
    case 30: return 0x000100; break;
    case 31: return 0x001100; break;
    case 32: return 0x002200; break;
    case 33: return 0x003300; break;
    case 34: return 0x004400; break;
    case 35: return 0x006600; break;
    case 36: return 0x008800; break;
    case 37: return 0x00AA00; break;
    case 38: return 0x00CC00; break;
    case 39: return 0x00EE00; break;
    case 40: return 0x000001; break;
    case 41: return 0x000011; break;
    case 42: return 0x000022; break;
    case 43: return 0x000033; break;
    case 44: return 0x000044; break;
    case 45: return 0x000066; break;
    case 46: return 0x000088; break;
    case 47: return 0x0000AA; break;
    case 48: return 0x0000CC; break;
    case 49: return 0x0000EE; break;
    case 50: return 0x010100; break;
    case 51: return 0x111100; break;
    case 52: return 0x222200; break;
    case 53: return 0x333300; break;
    case 54: return 0x444400; break;
    case 55: return 0x666600; break;
    case 56: return 0x888800; break;
    case 57: return 0xAAAA00; break;
    case 58: return 0xCCCC00; break;
    case 59: return 0xEEEE00; break;
    case 60: return 0x000101; break;
    case 61: return 0x001111; break;
    case 62: return 0x002222; break;
    case 63: return 0x003333; break;
    case 64: return 0x004444; break;
    case 65: return 0x006666; break;
    case 66: return 0x008888; break;
    case 67: return 0x00AAAA; break;
    case 68: return 0x00CCCC; break;
    case 69: return 0x00EEEE; break;
    case 70: return 0x010001; break;
    case 71: return 0x110011; break;
    case 72: return 0x220022; break;
    case 73: return 0x330033; break;
    case 74: return 0x440044; break;
    case 75: return 0x660066; break;
    case 76: return 0x880088; break;
    case 77: return 0xAA00AA; break;
    case 78: return 0xCC00CC; break;
    case 79: return 0xEE00EE; break;
    // Wall-e
    case 100: return 0xFFFFFF; break;
    case 101: return 0xAAA8A8; break;
    case 102: return 0x404040; break;
    case 103: return 0xFF7F02; break;
    case 104: return 0x884000; break;
    case 105: return 0x412828; break;
    case 106: return 0x201515; break;
    case 107: return 0xDD6D00; break;
       // EVA
    case 108: return 0x000000; break;
    case 109: return 0xFFFFFF; break;
    case 110: return 0x273753; break;
    case 111: return 0x17223B; break;
    case 112: return 0x0048FF; break;
    case 113: return 0x3E3F41; break;
    case 114: return 0x030816; break;
    case 115: return 0x68768F; break;
    case 116: return 0x4E6282; break;
    case 117: return 0x99B3D8; break;
    case 118: return 0x5C7CAE; break;
    case 119: return 0x7195A4; break;
    case 120: return 0x7190C6; break;
    case 121: return 0x2B4568; break;
    case 122: return 0x43516A; break;
    case 123: return 0x0572C8; break;


  }
  return 0;
}

void textViewToLeds(uint8_t whichSegment) {
  for (uint8_t i = 0; i < 8; i++) {
    if (i % 2) {
      for (uint8_t j = 0; j < 8; j++) {
        leds[(31 - (textViewHeight + i)) * 8 + j] = getColorByByte(textView[whichSegment * 8 + j][i]);
      }
    } else {
      for (uint8_t j = 0; j < 8; j++) {
        leds[(31 - (textViewHeight + i)) * 8 + j] = getColorByByte(textView[whichSegment * 8 + 7 - j][i]);
      }
    }
  }
}

void textViewToLeds2(uint8_t whichSegment) {
  for (uint8_t i = 0; i < 8; i++) {
    if (i % 2) {
      for (uint8_t j = 0; j < 8; j++) {
        leds[(31 - (textViewHeight2 + i)) * 8 + j] = getColorByByte(textView2[whichSegment * 8 + j][i]);
      }
    } else {
      for (uint8_t j = 0; j < 8; j++) {
        leds[(31 - (textViewHeight2 + i)) * 8 + j] = getColorByByte(textView2[whichSegment * 8 + 7 - j][i]);
      }
    }
  }
}

uint8_t animFrame = 1;
uint32_t animSwitchingTimer = 0;
const uint8_t animHeight = 8;
void animToLeds(uint8_t whichSegment) {
  for (uint8_t i = 0; i < 16; i++) {
    if (i % 2) {
      for (uint8_t j = 0; j < 8; j++) {
        leds[(31 - (animHeight + i)) * 8 + j] = getColorByByte(pgm_read_byte(&anim[animFrame][whichSegment * 8 + j][15-i]));
      }
    } else {
      for (uint8_t j = 0; j < 8; j++) {
        leds[(31 - (animHeight + i)) * 8 + j] = getColorByByte(pgm_read_byte(&anim[animFrame][whichSegment * 8 + 7 - j][15-i]));
      }
    }
  }
}

void workLeds() {
  for (uint8_t i = 0; i < LEDSTRIP_SEGMENT_COUNT; i++) {
    // off all
    for (uint8_t j = 0; j < LEDSTRIP_SEGMENT_COUNT; j++) {
      digitalWrite(PIN_LEDSTRIP_SEGMENT_SELECT[j], 0);      
    }
    // on selected
    digitalWrite(PIN_LEDSTRIP_SEGMENT_SELECT[i], 1);
    // send data
    textViewToLeds(i);
    textViewToLeds2(i);
    animToLeds(i);
    leds.fadeToBlackBy(255 - brightness);
    FastLED.show();
  }
}

void workText() {
  switch (effect) {
    case 0: break;
    case 1: 
      colColor++;
      if (colColor >= 7)
        colColor = 1; 
      break;
  }
  // shift cols
  /**/
  for (uint8_t i = 0; i < LEDSTRIP_SEGMENT_COUNT * 8 - 1; i++) {
    for (uint8_t j = 0; j < 8; j++) {
      textView[i][j] = textView[i + 1][j];
    }
  }
  
  // set new col
  uint8_t lastColIndex = LEDSTRIP_SEGMENT_COUNT * 8 - 1;
  charCol++;
  if (charCol < pgm_read_byte(&alphabetLengths[assignedAlphabetCharIndex])) {
    // next col in char
    for (uint8_t j = 0; j < 8; j++)
      textView[lastColIndex][j] = ((pgm_read_byte(&chars[assignedAlphabetCharStart + charCol]) >> j) & 1)? colColor : 0;
  } else if (charCol > pgm_read_byte(&alphabetLengths[assignedAlphabetCharIndex]) + spaceBetweenChars) {
    // new char
    switch (effect) {
      case 2: 
        colColor++;
        if (colColor >= 7)
          colColor = 1; 
        break;
    }
    charCol = 0;
    textCharPos++;
    if (textCharPos > strlen(text) - 1) {
      // new string
      switch (effect) {
        case 3: 
          colColor++;
          if (colColor >= 7)
            colColor = 1; 
          break;
      }
      textCharPos = 0;
      textCycle++;
      if (textCycle >= textCycleCount) {
        textCycle = 0;
        // DO SOMETHING EVERY SOME CYCLES
        switch (effect) {
          case 4: 
            colColor++;
            if (colColor >= 7)
              colColor = 1; 
            break;
        }
      }
    }
    
    // INTEXT effects
    if ((char)pgm_read_byte(&text[textCharPos]) == '~') {
      textCharPos++;
      char ch = (char)pgm_read_byte(&text[textCharPos++]);
      if (ch == 'c') { // color
          uint8_t numberC = 0;
          numberC += (pgm_read_byte(&text[textCharPos++]) - '0')*100;
          numberC += (pgm_read_byte(&text[textCharPos++]) - '0')*10;
          numberC += pgm_read_byte(&text[textCharPos++]) - '0';
          colColor = numberC;
      } else
      if (ch == 'd') { // delay
          uint32_t numberS = 0;
          numberS += (pgm_read_byte(&text[textCharPos++]) - '0')*100000;
          numberS += (pgm_read_byte(&text[textCharPos++]) - '0')*10000;
          numberS += (pgm_read_byte(&text[textCharPos++]) - '0')*1000;
          numberS += (pgm_read_byte(&text[textCharPos++]) - '0')*100;
          numberS += (pgm_read_byte(&text[textCharPos++]) - '0')*10;
          numberS += pgm_read_byte(&text[textCharPos++]) - '0';
          textColSwitchingDelay = numberS;
      }
    }
    // INTEXT EFFECTS END
    assignedAlphabetCharIndex = 255;
    assignedAlphabetCharStart = 0;
    for (int i = 0 ; i < ALPHABET_COUNT; i++) {
      if ((char)pgm_read_byte(&text[textCharPos]) == (char)pgm_read_byte(&alphabet[i])) {
        assignedAlphabetCharIndex = i;
        break;
      }
      assignedAlphabetCharStart += (int)pgm_read_byte(&alphabetLengths[i]);
    }
    if (assignedAlphabetCharIndex2 == 255) {
      assignedAlphabetCharIndex2 = 0;
      assignedAlphabetCharStart2 = 0;
    }
    // set col
    for (uint8_t j = 0; j < 8; j++)
      textView[lastColIndex][j] = ((pgm_read_byte(&chars[assignedAlphabetCharStart + charCol]) >> j) & 1)? colColor : 0;
  } else {
    // just space
    for (uint8_t i = 0; i < 8; i++) {
      textView[lastColIndex][i] = 0;
    }
  }
}

void workText2() {
  switch (effect2) {
    case 0: break;
    case 1: 
      colColor2++;
      if (colColor2 >= 7)
        colColor2 = 1; 
      break;
  }
  // shift cols
  /**/
  for (uint8_t i = 0; i < LEDSTRIP_SEGMENT_COUNT * 8 - 1; i++) {
    for (uint8_t j = 0; j < 8; j++) {
      textView2[i][j] = textView2[i + 1][j];
    }
  }

  // set new col
  uint8_t lastColIndex2 = LEDSTRIP_SEGMENT_COUNT * 8 - 1;
  charCol2++;
  if (textInLength < 2) {
    // for flashed text
    if (charCol2 < pgm_read_byte(&alphabetLengths[assignedAlphabetCharIndex2])) {
      // next col in char
      for (uint8_t j = 0; j < 8; j++)
        textView2[lastColIndex2][j] = ((pgm_read_byte(&chars[assignedAlphabetCharStart2 + charCol2]) >> j) & 1)? colColor2 : 0;
    } else if (charCol2 > pgm_read_byte(&alphabetLengths[assignedAlphabetCharIndex2]) + spaceBetweenChars) {
      // new char
      switch (effect2) {
        case 2: 
          colColor2++;
          if (colColor2 >= 7)
            colColor2 = 1; 
          break;
      }
      charCol2 = 0;
      textCharPos2++;
      if (textCharPos2 > strlen(text2) - 1) {
        // new string
        switch (effect2) {
          case 3: 
            colColor2++;
            if (colColor2 >= 7)
              colColor2 = 1; 
            break;
        }
        textCharPos2 = 0;
        textCycle2++;
        if (textCycle2 >= textCycleCount) {
          textCycle2 = 0;
          // DO SOMETHING EVERY SOME CYCLES
          switch (effect2) {
            case 4: 
              colColor2++;
              if (colColor2 >= 7)
                colColor2 = 1; 
              break;
          }
        }
      }
      
      // INTEXT effects <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
      
      if ((char)pgm_read_byte(&text2[textCharPos2]) == '~') {
        textCharPos2++;
        char ch = (char)pgm_read_byte(&text2[textCharPos2++]);
        if (ch == 'c') { // color
            uint8_t numberC = 0;
            numberC += (pgm_read_byte(&text2[textCharPos2++]) - '0')*100;
            numberC += (pgm_read_byte(&text2[textCharPos2++]) - '0')*10;
            numberC += pgm_read_byte(&text2[textCharPos2++]) - '0';
            colColor2 = numberC;
        } else
        if (ch == 'd') { // speed
            uint32_t numberS = 0;
            numberS += (pgm_read_byte(&text2[textCharPos2++]) - '0')*100000;
            numberS += (pgm_read_byte(&text2[textCharPos2++]) - '0')*10000;
            numberS += (pgm_read_byte(&text2[textCharPos2++]) - '0')*1000;
            numberS += (pgm_read_byte(&text2[textCharPos2++]) - '0')*100;
            numberS += (pgm_read_byte(&text2[textCharPos2++]) - '0')*10;
            numberS += pgm_read_byte(&text2[textCharPos2++]) - '0';
            textColSwitchingDelay2 = numberS;
        }
      }
      // INTEXT EFFECTS END
      assignedAlphabetCharIndex2 = 255;
      assignedAlphabetCharStart2 = 0;
      for (int i = 0 ; i < ALPHABET_COUNT; i++) {
        if ((char)pgm_read_byte(&text2[textCharPos2]) == (char)pgm_read_byte(&alphabet[i])) {
          assignedAlphabetCharIndex2 = i;
          break;
        }
        assignedAlphabetCharStart2 += (int)pgm_read_byte(&alphabetLengths[i]);
      }
      if (assignedAlphabetCharIndex2 == 255) {
        assignedAlphabetCharIndex2 = 0;
        assignedAlphabetCharStart2 = 0;
      }
      // set col
      for (uint8_t j = 0; j < 8; j++)
        textView2[lastColIndex2][j] = ((pgm_read_byte(&chars[assignedAlphabetCharStart2 + charCol2]) >> j) & 1)? colColor2 : 0;
    } else {
      // just space
      for (uint8_t i = 0; i < 8; i++) {
        textView2[lastColIndex2][i] = 0;
      }
    }
  } else {
    // for INPUTTED text
    if (charCol2 < pgm_read_byte(&alphabetLengths[assignedAlphabetCharIndex2])) {
      // next col in char
      for (uint8_t j = 0; j < 8; j++)
        textView2[lastColIndex2][j] = ((pgm_read_byte(&chars[assignedAlphabetCharStart2 + charCol2]) >> j) & 1)? colColor2 : 0;
    } else if (charCol2 > pgm_read_byte(&alphabetLengths[assignedAlphabetCharIndex2]) + spaceBetweenChars) {
      // new char
      switch (effect2) {
        case 2: 
          colColor2++;
          if (colColor2 >= 7)
            colColor2 = 1; 
          break;
      }
      charCol2 = 0;
      textCharPos2++;
      if (textCharPos2 > textInLength - 1) {
        // new string
        switch (effect2) {
          case 3: 
            colColor2++;
            if (colColor2 >= 7)
              colColor2 = 1; 
            break;
        }
        textCharPos2 = 0;
        textCycle2++;
        if (textCycle2 >= textCycleCount) {
          textCycle2 = 0;
          // DO SOMETHING EVERY SOME CYCLES
          switch (effect2) {
            case 4: 
              colColor2++;
              if (colColor2 >= 7)
                colColor2 = 1; 
              break;
          }
        }
      }
      
      // INTEXT effects <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      
      if (EEPROM.read(textInAddress + textCharPos2) == '~') {
        textCharPos2++;
        char ch = EEPROM.read(textInAddress + textCharPos2++);
        if (ch == 'c') { // color
            uint8_t numberC = 0;
            numberC += (EEPROM.read(textInAddress + textCharPos2++) - '0')*100;
            numberC += (EEPROM.read(textInAddress + textCharPos2++) - '0')*10;
            numberC += EEPROM.read(textInAddress + textCharPos2++) - '0';
            colColor2 = numberC;
        } else
        if (ch == 'd') { // speed
            uint32_t numberS = 0;
            numberS += (EEPROM.read(textInAddress + textCharPos2++) - '0')*100000;
            numberS += (EEPROM.read(textInAddress + textCharPos2++) - '0')*10000;
            numberS += (EEPROM.read(textInAddress + textCharPos2++) - '0')*1000;
            numberS += (EEPROM.read(textInAddress + textCharPos2++) - '0')*100;
            numberS += (EEPROM.read(textInAddress + textCharPos2++) - '0')*10;
            numberS += EEPROM.read(textInAddress + textCharPos2++) - '0';
            textColSwitchingDelay2 = numberS;
        }
      }
      // INTEXT EFFECTS END
      assignedAlphabetCharIndex2 = 255;
      assignedAlphabetCharStart2 = 0;
      for (int i = 0 ; i < ALPHABET_COUNT; i++) {
        if (EEPROM.read(textInAddress + textCharPos2) == (char)pgm_read_byte(&alphabet[i])) {
          assignedAlphabetCharIndex2 = i;
          break;
        }
        assignedAlphabetCharStart2 += (int)pgm_read_byte(&alphabetLengths[i]);
      }
      if (assignedAlphabetCharIndex2 == 255) {
        assignedAlphabetCharIndex2 = 0;
        assignedAlphabetCharStart2 = 0;
      }
      // set col
      for (uint8_t j = 0; j < 8; j++)
        textView2[lastColIndex2][j] = ((pgm_read_byte(&chars[assignedAlphabetCharStart2 + charCol2]) >> j) & 1)? colColor2 : 0;
    } else {
      // just space
      for (uint8_t i = 0; i < 8; i++) {
        textView2[lastColIndex2][i] = 0;
      }
    }
  }
}

void loadFromEeprom(){
  byte buf = 255;
  EEPROM.get(0, buf);
  if (buf != 255) {
    EEPROM.get(brightnessAddress, brightness);
    if (brightness > brightnessMax)
      brightness = brightnessMax;
    EEPROM.get(spaceBetweenCharsAddress, spaceBetweenChars);
    EEPROM.get(animDelayMultiplexerAddress, animDelayMultiplexer);
    EEPROM.get(textInLengthAddress, textInLength);
  } else {
    brightness = brightnessDefault;
    spaceBetweenChars = spaceBetweenCharsDefault;
    animDelayMultiplexer = animDelayMultiplexerDefault;
    textInLength = 0;
  }
  Serial.print("brightness = ");
  Serial.println(brightness);
  Serial.print("spaceBetweenChars = ");
  Serial.println(spaceBetweenChars);
  Serial.print("animDelayMultiplexer = ");
  Serial.println(animDelayMultiplexer);
  Serial.print("textInLength = ");
  Serial.println(textInLength);
}

void saveToEeprom(){
  EEPROM.write(0, 127);
  EEPROM.put(brightnessAddress, brightness);
  EEPROM.put(spaceBetweenCharsAddress, spaceBetweenChars);
  EEPROM.put(animDelayMultiplexerAddress, animDelayMultiplexer);
  EEPROM.put(textInLengthAddress, textInLength);
}

void setup() {
  Serial.begin(57600);
  Serial.setTimeout(2000);
  loadFromEeprom();
  pinMode(PIN_LEDSTRIP, OUTPUT);
  pinMode(PIN_LEDSTRIP_SEGMENT_SELECT[0], OUTPUT);
  pinMode(PIN_LEDSTRIP_SEGMENT_SELECT[1], OUTPUT);
  FastLED.addLeds<WS2812, PIN_LEDSTRIP, GRB>(leds, LEDS_COUNT);
}

uint32_t delayCounter = 0;
bool needUpdate = false;
bool reading = false;
uint32_t readingTimeout = 0;
const uint32_t readingTimeoutDelay = 2000;
void loop() {
  if (true) {

  }
  else
  if (Serial.available()){
    delay(10);
    char ch = Serial.read();
    if (reading) {
      if (ch == '\r' || ch == '\n' || ch == '\0') {
        // stop reading & reset
        delay(100);
        while (Serial.available())
          Serial.read();
        Serial.println(textInLength);
        for (uint8_t i = 0; i < textInLength; i++)
          Serial.write(EEPROM.read(textInAddress + i));
        Serial.println();
        reading = false;
        textCharPos2 = 0;
        charCol2 = 0;
        saveToEeprom();
      } else {
        readingTimeout = millis() + readingTimeoutDelay;
        EEPROM.write(textInAddress + textInLength, ch);
        textInLength++;
      }
    } else {
      if (ch == '!') {
        if (Serial.available() > 0) {
          // cmdmode
          char subCh = Serial.read();
          if (subCh == '?') {
            // help
            Serial.println("INTEXT: ~d030000 for delay 30000. ~c005 for R+G color.");
            Serial.println("b r D >I< 3 I II L P F C CH SH SHJ MZ bI TZ E YU YA");
            Serial.println("q u l w__ p b d_ k g a y x_ i_ o__ m_ s_ e_ r t_ z");
            Serial.println("!? for help. !c for clear. !b050 for brightness 50.");
            Serial.println("!r for random one number 0 to 9");
            Serial.println("!d[b/s/a] to restore default (brightness/spaceBetweenChars/animDelayMultiplexer)");          
          } else if (subCh == 'r') {
            // RANDOM
            EEPROM.write(textInAddress + 0, random(10) + '0');
            EEPROM.write(textInAddress + 1, ' ');
            EEPROM.write(textInAddress + 2, ' ');
            textInLength = 3;
            saveToEeprom();
          } else if (subCh == 'c') {
            // clear
            Serial.println("Received buffer is cleared");
            Serial.println("Now must be: ");
            for (uint8_t i = 0; i < strlen(text); i++)
              Serial.print((char)pgm_read_byte(&text2[i]));
            Serial.println();
            textCharPos2 = 0;
            charCol2 = 0;
            textInLength = 0;
            saveToEeprom();
          } else if (subCh == 'b') {
            if (Serial.available() > 2) {
              // brightness
              uint8_t numberC = 0;
              numberC += (Serial.read() - '0')*100;
              numberC += (Serial.read() - '0')*10;
              numberC += Serial.read() - '0';
              brightness = numberC;      
              if (brightness > brightnessMax)
                brightness = brightnessMax;
              if (brightness < 1)  
                brightness = 1;  
              Serial.print("Brightness setted to: ");   
              Serial.println(brightness);
              saveToEeprom();
            } else {
              while (Serial.available())
                Serial.read();
              Serial.println("Connection problem. !b got only");
            }
          } else if (subCh == 'd') {
            if (Serial.available() > 0) {
              char target = Serial.read();
              if (target == 'b')
                brightness = brightnessDefault;
              if (target == 's')
                spaceBetweenChars = spaceBetweenCharsDefault;
              if (target == 'a')
                animDelayMultiplexer = animDelayMultiplexerDefault;
              saveToEeprom();
              Serial.print("brightness = ");
              Serial.println(brightness);
              Serial.print("spaceBetweenChars = ");
              Serial.println(spaceBetweenChars);
              Serial.print("animDelayMultiplexer = ");
              Serial.println(animDelayMultiplexer);
              Serial.print("textInLength = ");
              Serial.println(textInLength);
            } else {
              Serial.println("Connection problem. !z got only");
            }
          }
        } else {
          Serial.println("Connection problem. ! got only");
        }
      } else {
        reading = true;
        readingTimeout = millis() + readingTimeoutDelay;
        EEPROM.write(textInAddress + textInLength, ch);
        textInLength++;
      }
    }
  }
  if (!reading) {
    needUpdate = false;
    if (animEnabled) {
      if (millis() > animSwitchingTimer) {
        switch (pgm_read_byte(&animWorkflow[animStage][1])) {
          case 0: animSwitchingTimer = millis() + pgm_read_byte(&animWorkflow[animStage][2]) * animDelayMultiplexer; break;
          case 1: animSwitchingTimer = millis() + random(
              pgm_read_byte(&animWorkflow[animStage][2]) * animDelayMultiplexer, 
              pgm_read_byte(&animWorkflow[animStage][3]) * animDelayMultiplexer); break;
        }
        animFrame = pgm_read_byte(&animWorkflow[animStage][0]);
        animStage++;
        if (animStage >= animStageCount)
          animStage = 0;
        needUpdate = true;
      }
    }
    if (micros() > textColSwitchingTime) {
      textColSwitchingTime = micros() + textColSwitchingDelay;
      workText();
      needUpdate = true;
    }
    if (micros() > textColSwitchingTime2) {
      textColSwitchingTime2 = micros() + textColSwitchingDelay2;
      workText2();
      needUpdate = true;
    }
    if (needUpdate)
      workLeds();
  } else {
    if (millis() > readingTimeout)
      reading = false;
  }
}